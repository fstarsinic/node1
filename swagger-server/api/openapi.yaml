openapi: 3.0.3
info:
  title: Swagger teamgame - OpenAPI 3.0
  description: |-
    This is a sample team game Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the team game, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of teamgame, then click [here](https://editor.swagger.io/?url=https://teamgame.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load teamgame OAS 2.0` menu option!_

    Some useful links:
    - [The team game repository](https://github.com/swagger-api/swagger-teamgame)
    - [The source API definition for the team game](https://github.com/swagger-api/swagger-teamgame/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost/api/
tags:
- name: upload
  description: Everything about your uploads
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: team
  description: Everything about your teams
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: game
  description: Access to teamgame orders
  externalDocs:
    description: Find out more about our game
    url: http://swagger.io
- name: player
  description: Operations about player
paths:
  /upload:
    post:
      tags:
      - upload
      summary: uploads a file
      description: uploads a file. Will be expanded later.
      operationId: upload
      parameters:
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/upload_body'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: unsuccessful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Upload
  /team:
    get:
      tags:
      - team
      summary: Gets all teams
      description: Gets all teams
      operationId: teamGET
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
        "400":
          description: Invalid status value
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
    put:
      tags:
      - team
      summary: Update an existing team
      description: Update an existing team by Id
      operationId: updateteam
      requestBody:
        description: Update an existent team in the game
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team'
          application/xml:
            schema:
              $ref: '#/components/schemas/team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/team'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
            application/xml:
              schema:
                $ref: '#/components/schemas/team'
        "400":
          description: Invalid ID supplied
        "404":
          description: team not found
        "405":
          description: Validation exception
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
    post:
      tags:
      - team
      summary: Add a new team
      description: Add a new team
      operationId: addteam
      requestBody:
        description: Create a new team in the league
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/team'
          application/xml:
            schema:
              $ref: '#/components/schemas/team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/team'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
            application/xml:
              schema:
                $ref: '#/components/schemas/team'
        "405":
          description: Invalid input
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /team/findByName/{teamName}:
    get:
      tags:
      - team
      summary: Find team by Name
      description: Returns a single team
      operationId: getTeamByName
      parameters:
      - name: teamName
        in: path
        description: Name of team to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/team'
        "400":
          description: Invalid tag value
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /team/scorecard/{TeamId}:
    get:
      tags:
      - team
      summary: Find team by ID
      description: Returns a single team
      operationId: getteamById
      parameters:
      - name: TeamId
        in: path
        description: ID of team to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
            application/xml:
              schema:
                $ref: '#/components/schemas/team'
        "400":
          description: Invalid ID supplied
        "404":
          description: team not found
      security:
      - api_key: []
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /team/gameData/{TeamId}:
    get:
      tags:
      - team
      summary: Find team by ID
      description: Returns a single team
      operationId: getTeamGameData
      parameters:
      - name: TeamId
        in: path
        description: ID of team to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
            application/xml:
              schema:
                $ref: '#/components/schemas/team'
        "400":
          description: Invalid ID supplied
        "404":
          description: team not found
      security:
      - api_key: []
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /team/{TeamId}:
    get:
      tags:
      - team
      summary: Find team by ID
      description: Returns a single team
      operationId: getTeamById
      parameters:
      - name: TeamId
        in: path
        description: ID of team to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/team'
            application/xml:
              schema:
                $ref: '#/components/schemas/team'
        "400":
          description: Invalid ID supplied
        "404":
          description: team not found
      security:
      - api_key: []
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
    post:
      tags:
      - team
      summary: Updates a team in the game with form data
      description: ""
      operationId: updateteamWithForm
      parameters:
      - name: TeamId
        in: path
        description: ID of team that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: Name of team that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: Status of team that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
    delete:
      tags:
      - team
      summary: Deletes a team
      description: delete a team
      operationId: deleteteam
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: TeamId
        in: path
        description: team id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid team value
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /team/{TeamId}/uploadImage:
    post:
      tags:
      - team
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
      - name: TeamId
        in: path
        description: ID of team to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - teamgame_auth:
        - write:teams
        - read:teams
      x-swagger-router-controller: Team
  /game/inventory:
    get:
      tags:
      - game
      summary: Returns team inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                x-content-type: application/json
      security:
      - api_key: []
      x-swagger-router-controller: Game
  /game/order:
    post:
      tags:
      - game
      summary: Place an order for a team
      description: Place a new order in the game
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "405":
          description: Invalid input
      x-swagger-router-controller: Game
  /game/order/{orderId}:
    get:
      tags:
      - game
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-swagger-router-controller: Game
    delete:
      tags:
      - game
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-swagger-router-controller: Game
  /player:
    post:
      tags:
      - player
      summary: Create player
      description: This can only be done by the logged in player.
      operationId: createplayer
      requestBody:
        description: Created player object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/player'
          application/xml:
            schema:
              $ref: '#/components/schemas/player'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/player'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
            application/xml:
              schema:
                $ref: '#/components/schemas/player'
      x-swagger-router-controller: Player
  /player/createWithList:
    post:
      tags:
      - player
      summary: Creates list of players with given input array
      description: Creates list of players with given input array
      operationId: createplayersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/player'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
            application/xml:
              schema:
                $ref: '#/components/schemas/player'
        default:
          description: successful operation
      x-swagger-router-controller: Player
  /player/login:
    get:
      tags:
      - player
      summary: Logs player into the system
      description: ""
      operationId: loginplayer
      parameters:
      - name: playername
        in: query
        description: The player name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the player
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid playername/password supplied
      x-swagger-router-controller: Player
  /player/logout:
    get:
      tags:
      - player
      summary: Logs out current logged in player session
      description: ""
      operationId: logoutplayer
      parameters: []
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: Player
  /player/:
    get:
      tags:
      - player
      summary: Gets all players
      description: ""
      operationId: playerGET
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
            application/xml:
              schema:
                $ref: '#/components/schemas/player'
        "404":
          description: player not found
      x-swagger-router-controller: Player
  /player/{id}:
    get:
      tags:
      - player
      summary: Get player by player id
      description: ""
      operationId: get_player_by_id
      parameters:
      - name: id
        in: path
        description: 'The id that needs to be fetched. Use 1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
            application/xml:
              schema:
                $ref: '#/components/schemas/player'
        "400":
          description: Invalid playername supplied
        "404":
          description: player not found
      x-swagger-router-controller: Player
    put:
      tags:
      - player
      summary: Update player
      description: This can only be done by the logged in player.
      operationId: updateplayer
      parameters:
      - name: id
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent player in the game
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/player'
          application/xml:
            schema:
              $ref: '#/components/schemas/player'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/player'
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: Player
    delete:
      tags:
      - player
      summary: Delete player
      description: This can only be done by the logged in player.
      operationId: deleteplayer
      parameters:
      - name: id
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid playername supplied
        "404":
          description: player not found
      x-swagger-router-controller: Player
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        TeamId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
      example:
        quantity: 7
        id: 10
        TeamId: 198772
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: true
        status: approved
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        playername:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    player:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theplayer
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        team_id:
          type: integer
          format: int32
          example: 3
        captain:
          type: integer
          example: 1
        player_number:
          type: string
          example: "12"
      example:
        firstName: John
        lastName: James
        player_number: "12"
        name: theplayer
        id: 10
        team_id: 3
        captain: 1
      xml:
        name: player
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    team:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Downpour
      example:
        name: Downpour
        id: 10
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      example:
        code: 0
        type: type
        message: message
      xml:
        name: '##default'
    upload_body:
      type: object
      properties:
        csvFile:
          type: string
          format: binary
  requestBodies:
    team:
      description: team object that needs to be added to the game
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/team'
        application/xml:
          schema:
            $ref: '#/components/schemas/team'
    playerArray:
      description: List of player object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/player'
  securitySchemes:
    teamgame_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://teamgame3.swagger.io/oauth/authorize
          scopes:
            write:teams: modify teams in your account
            read:teams: read your teams
    api_key:
      type: apiKey
      name: api_key
      in: header
